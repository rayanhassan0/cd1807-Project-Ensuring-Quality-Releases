name: Azure Pipelines

trigger:
- main

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'udacity-az-sp'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  resourceGroup: 'Azuredevops'
  appServiceName: 'myapp-AppService'

stages:
# =============== BUILD ===============
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform + Postman + Package'
    steps:
    - task: AzureCLI@2
      displayName: 'Show Azure account'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az account show

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.13.1'

    # تأكيد أن ملفات التيرافورم موجودة (مطابقة لهيكل صاحبتك)
    - task: Bash@3
      displayName: 'Debug: list terraform folder'
      inputs:
        targetType: inline
        script: |
          set -e
          ls -la $(System.DefaultWorkingDirectory)/terraform/environments/test
          echo "---- modules/appservice ----"
          ls -la $(System.DefaultWorkingDirectory)/terraform/environments/test/modules/appservice || true
          echo "---- modules/network ----"
          ls -la $(System.DefaultWorkingDirectory)/terraform/environments/test/modules/network || true
          echo "---- terraform.tfvars ----"
          sed -n '1,200p' $(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars

    # نضمن وجود تخزين backend (SA + container)
    - task: AzureCLI@2
      displayName: 'Ensure backend storage exists'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RG="$(resourceGroup)"
          LOC="westus3"
          SA="tfstatebootstrap01"
          echo "Ensure SA=$SA RG=$RG LOC=$LOC"
          if ! az storage account show -g "$RG" -n "$SA" >/dev/null 2>&1; then
            az storage account create -g "$RG" -n "$SA" -l "$LOC" --sku Standard_LRS
          fi
          KEY=$(az storage account keys list -g "$RG" -n "$SA" --query "[0].value" -o tsv)
          az storage container create --name tfstate --account-name "$SA" --auth-mode key --account-key "$KEY" >/dev/null
          echo "Backend ready."

    # init على نفس مسار الموديولات
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Postman
    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Data-Validation.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export TEST-DataValidation.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Regression.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export TEST-Regression.xml
        workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish Postman JUnit Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TEST-*.xml'
        searchFolder: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        mergeTestResults: true
        testRunTitle: 'Postman Results'

    # Selenium package
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests (Selenium)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Publish UI Tests Artifact'
      artifact: drop-uitests

    # FakeRestAPI package
    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Publish FakeRestAPI Artifact'
      artifact: drop-fakerestapi

    # JMeter package
    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite (JMeter)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Publish Perf Tests Artifact'
      artifact: drop-perftests

# =============== DEPLOY ===============
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: FakeRestAPI
    displayName: 'Deploy App & Run JMeter'
    pool:
      name: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-fakerestapi

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: '$(appServiceName)'
              appType: 'webApp'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

          - download: current
            artifact: drop-perftests

          - task: Bash@3
            displayName: 'Run JMeter (Performance)'
            inputs:
              targetType: inline
              script: |
                set -e
                cd "$(Pipeline.Workspace)"
                mkdir -p perf && cd perf
                curl -L -o apache-jmeter.tgz https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-5.6.3.tgz
                tar -xzf apache-jmeter.tgz
                unzip -o "$(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip" -d perftests
                JM="$(pwd)/apache-jmeter-5.6.3"
                JMX="perftests/PerformanceTestSuite.jmx"
                if [ ! -f "$JMX" ]; then
                  echo "JMeter test file not found: $JMX" && exit 1
                fi
                HN=$(az webapp show -g "$(resourceGroup)" -n "$(appServiceName)" --query defaultHostName -o tsv)
                APPURL="https://$HN"
                echo "Testing against: $APPURL"
                "$JM/bin/jmeter" -n -t "$JMX" -JAPPSERVICEURL="$APPURL" -l perftests/results.jtl -e -o perftests/html-report || true
                echo "JMeter done."

          - task: PublishBuildArtifacts@1
            displayName: 'Publish JMeter HTML Report'
            inputs:
              PathtoPublish: '$(Pipeline.Workspace)/perf/perftests/html-report'
              ArtifactName: 'jmeter-report'
              publishLocation: 'Container'

  - deployment: VMDeploy
    displayName: 'Selenium UI Tests'
    pool:
      name: myAgentPool
    environment:
      name: $(environmentName)
      resourceType: VirtualMachine
      tags: selenium
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-uitests
          - task: Bash@3
            displayName: 'Run Selenium'
            inputs:
              targetType: 'inline'
              script: |
                set -e
                mkdir -p "$HOME/selenium"
                unzip -o "$(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip" -d "$HOME/selenium"
                python3 -m pip install --user -r "$HOME/selenium/requirements.txt" || true
                export DEMO_URL="https://www.saucedemo.com/"
                export DEMO_USER="standard_user"
                export DEMO_PASS="secret_sauce"
                python3 "$HOME/selenium/login.py" || true
                echo "Selenium finished."

# =============== CLEANUP ===============
- stage: Cleanup
  displayName: 'Terraform Destroy'
  dependsOn: Deploy
  condition: always()
  jobs:
  - job: Destroy
    pool:
      name: myAgentPool
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation (Cleanup)'
      inputs:
        terraformVersion: '1.13.1'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
