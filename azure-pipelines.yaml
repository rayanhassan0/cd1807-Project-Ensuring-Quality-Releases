name: Azure Pipelines

trigger:
- main

pool:
  name: myAgentPool

variables:
  python.version: '3.10'
  azureServiceConnectionId: 'udacity-az-sp'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  resourceGroup: 'Azuredevops'
  appServiceName: 'myapp-AppService'

stages:
# ========================= BUILD =========================
- stage: Build
  displayName: Build
  jobs:
  - job: BuildAndPackage
    displayName: 'Terraform + Postman + Package'
    steps:
    # Terraform
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform install'
      inputs:
        terraformVersion: '1.13.1'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    # Postman (Newman)
    - task: NodeTool@0
      displayName: 'Use Node.js 18.x'
      inputs:
        versionSpec: '18.x'

    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: Bash@3
      displayName: 'Prepare Postman result folder'
      inputs:
        targetType: inline
        script: |
          set -e
          mkdir -p '$(Build.SourcesDirectory)/automatedtesting/postman/results'
          rm -f   '$(Build.SourcesDirectory)/automatedtesting/postman/results/'*.xml

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Data-Validation.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-DataValidation.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Regression.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-Regression.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish Postman Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/automatedtesting/postman/results'
        mergeTestResults: true
        testRunTitle: 'Postman Results'
        failTaskOnFailedTests: false

    # أرشفة ونشر الحزم
    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests (Selenium)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite (JMeter)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      artifact: drop-perftests

# ========================= DEPLOY =========================
- stage: Deploy
  displayName: Deploy
  dependsOn: Build
  jobs:
  - deployment: FakeRestAPI
    displayName: 'Deploy WebApp + Run JMeter'
    pool:
      name: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-fakerestapi

          # نشر عبر WEBSITE_RUN_FROM_PACKAGE لتفادي علوق كودو
          - task: AzureCLI@2
            displayName: 'Upload ZIP to Storage & set WEBSITE_RUN_FROM_PACKAGE'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -euxo pipefail
                RG="$(resourceGroup)"
                APP="$(appServiceName)-$(Build.BuildId)"
                SA="tfstatebootstrap01"
                CN="deploypkgs"
                ZIP="$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                BLOB="fakerestapi-$(Build.BuildId).zip"

                KEY=$(az storage account keys list -g "$RG" -n "$SA" --query "[0].value" -o tsv)
                az storage container create --name "$CN" --account-name "$SA" --auth-mode key --account-key "$KEY" >/dev/null
                az storage blob upload --account-name "$SA" --auth-mode key --account-key "$KEY" \
                  --container-name "$CN" --name "$BLOB" --file "$ZIP" --overwrite

                EXP=$(date -u -d "+2 days" '+%Y-%m-%dT%H:%MZ')
                SAS=$(az storage blob generate-sas \
                  --account-name "$SA" --auth-mode key --account-key "$KEY" \
                  --container-name "$CN" --name "$BLOB" --permissions r --expiry "$EXP" -o tsv)
                URL="https://${SA}.blob.core.windows.net/${CN}/${BLOB}?${SAS}"

                az webapp config appsettings set -g "$RG" -n "$APP" --settings \
                  WEBSITE_RUN_FROM_PACKAGE="$URL" \
                  SCM_DO_BUILD_DURING_DEPLOYMENT=false \
                  SCM_COMMAND_IDLE_TIMEOUT=1800 \
                  WEBSITES_CONTAINER_START_TIME_LIMIT=1800

                az webapp restart -g "$RG" -n "$APP"

                APPURL="https://$APP.azurewebsites.net"
                for i in $(seq 1 30); do
                  code=$(curl -s -o /dev/null -w "%{http_code}" -m 10 "$APPURL" || true)
                  echo "Probe $i -> $code"
                  if [ "$code" = "200" ] || [ "$code" = "301" ] || [ "$code" = "302" ]; then
                    echo "App is up: $APPURL"
                    exit 0
                  fi
                  sleep 5
                done
                echo "App not ready: $APPURL" >&2
                exit 1

          - download: current
            artifact: drop-perftests

          - task: Bash@3
            displayName: 'Run JMeter (Performance)'
            timeoutInMinutes: 30
            inputs:
              targetType: inline
              script: |
                set -e
                cd "$(Pipeline.Workspace)"
                mkdir -p perf && cd perf
                if ! command -v java >/dev/null 2>&1; then
                  sudo apt-get update -y
                  sudo apt-get install -y openjdk-11-jre-headless
                fi
                JM_VER=5.6.3
                curl -L --fail -o apache-jmeter.tgz "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JM_VER}.tgz"
                tar -xzf apache-jmeter.tgz
                unzip -o "$(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip" -d perftests
                JM="$(pwd)/apache-jmeter-${JM_VER}"
                JMX="perftests/Starter.jmx"
                [ -f "$JMX" ] || JMX="perftests/PerformanceTestSuite.jmx"
                [ -f "$JMX" ] || { echo "No JMX file under perftests/"; ls -la perftests; exit 1; }
                APPURL="https://$(appServiceName)-$(Build.BuildId).azurewebsites.net"
                set +e
                "$JM/bin/jmeter" -n -t "$JMX" \
                  -JAPPSERVICEURL="$APPURL" \
                  -JAPP_URL="$APPURL" \
                  -JBASE_URL="$APPURL" \
                  -Jsummariser.name=summary \
                  -l perftests/results.jtl
                JM_EXIT=$?
                set -e
                mkdir -p perftests/html-report
                if [ -s perftests/results.jtl ]; then
                  "$JM/bin/jmeter" -g perftests/results.jtl -o perftests/html-report || true
                else
                  echo "<html><body><h2>No results</h2></body></html>" > perftests/html-report/index.html
                fi
                echo "JMeter exit: $JM_EXIT"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish JMeter HTML Report'
            inputs:
              targetPath: '$(Pipeline.Workspace)/perf/perftests/html-report'
              artifact: 'jmeter-report'

  - job: SeleniumUITests
    displayName: 'Selenium UI Tests'
    pool:
      name: myAgentPool
    steps:
    - download: current
      artifact: drop-uitests

    - task: Bash@3
      displayName: 'Run Selenium (Chrome + webdriver-manager)'
      timeoutInMinutes: 12
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          mkdir -p "$HOME/selenium"
          unzip -o "$(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip" -d "$HOME/selenium"

          # Swap مؤقت لمنع OOM أثناء تثبيت كروم
          if ! sudo swapon --show | grep -q swapfile; then
            sudo fallocate -l 2G /swapfile || sudo dd if=/dev/zero of=/swapfile bs=1M count=2048
            sudo chmod 600 /swapfile
            sudo mkswap /swapfile
            sudo swapon /swapfile
          fi

          # إزالة أي Chromium قديم + متطلبات
          sudo apt-get update -y
          sudo apt-get purge -y chromium-browser chromium-chromedriver || true
          sudo apt-get install -y fonts-liberation libu2f-udev libvulkan1 libgbm1 libasound2 xvfb gconf-service libxi6 || true

          # مستودع Google + تثبيت Chrome (مع إعادة محاولة)
          if [ ! -f /etc/apt/sources.list.d/google-chrome.list ]; then
            curl -fsSL https://dl.google.com/linux/linux_signing_key.pub | sudo gpg --dearmor -o /usr/share/keyrings/google-linux.gpg
            echo "deb [arch=amd64 signed-by=/usr/share/keyrings/google-linux.gpg] http://dl.google.com/linux/chrome/deb/ stable main" | sudo tee /etc/apt/sources.list.d/google-chrome.list
          fi
          sudo apt-get clean
          sudo apt-get update -y
          for i in 1 2 3; do
            sudo apt-get install -y --no-install-recommends google-chrome-stable && break || sleep 3
          done
          /usr/bin/google-chrome --version || true

          # بايثون ومتطلبات
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user -r "$HOME/selenium/requirements.txt"

          # webdriver-manager يجيب السليم تلقائياً
          export CHROME_BIN="/usr/bin/google-chrome"
          unset CHROMEDRIVER || true
          export DEMO_URL="https://www.saucedemo.com/"
          export DEMO_USER="standard_user"
          export DEMO_PASS="secret_sauce"

          # مجلدات مؤقتة لكروم
          export CHROME_TMP_BASE="$(mktemp -d)"
          export CHROME_USER_DATA_DIR="${CHROME_TMP_BASE}/user-data"
          export CHROME_CACHE_DIR="${CHROME_TMP_BASE}/cache"
          mkdir -p "$CHROME_USER_DATA_DIR" "$CHROME_CACHE_DIR"

          echo "=== Starting Selenium with timeout (4m) ==="
          timeout 4m python3 "$HOME/selenium/login.py"
          echo "Selenium finished."
