trigger:
- main

pool:
  name: myAgentPool

variables:
  azureServiceConnectionId: 'udacity-az-sp'
  resourceGroup: 'Azuredevops'
  location: 'eastus'
  appServiceName: 'fakerest-$(Build.BuildId)'
  environmentName: 'myEnvVM'

stages:
# =========================
# BUILD & TERRAFORM
# =========================
- stage: Build
  displayName: "Terraform + Package + API/Load"
  jobs:
  - job: BuildInfrastructure
    displayName: "Terraform & Package & Tests"
    steps:
    - checkout: self

    # Install Terraform
    - task: Bash@3
      displayName: "Install Terraform 1.6.6"
      inputs:
        targetType: 'inline'
        script: |
          curl -sLo terraform.zip https://releases.hashicorp.com/terraform/1.6.6/terraform_1.6.6_linux_amd64.zip
          unzip -o terraform.zip
          sudo mv terraform /usr/local/bin/
          terraform -version

    # Login to Azure
    - task: AzureCLI@2
      displayName: 'Az CLI Login'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          echo "Logged in as:"
          az account show

    # Get storage key for backend
    - task: AzureCLI@2
      displayName: "Get Storage Key"
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          KEY=$(az storage account keys list -g $(resourceGroup) -n $(storageAccount) --query "[0].value" -o tsv)
          echo "##vso[task.setvariable variable=TF_STORAGE_KEY;issecret=true]$KEY"

    # Write backend.tf
    - task: Bash@3
      displayName: "Write backend.tf"
      inputs:
        targetType: 'inline'
        script: |
          cat > $(System.DefaultWorkingDirectory)/terraform/environments/test/backend.tf << EOF
          terraform {
            backend "azurerm" {
              resource_group_name  = "$(resourceGroup)"
              storage_account_name = "$(storageAccount)"
              container_name       = "tfstate"
              key                  = "terraform.tfstate"
              access_key           = "$(TF_STORAGE_KEY)"
            }
          }
          EOF

    # Write terraform.tfvars
    - task: Bash@3
      displayName: "Write terraform.tfvars"
      inputs:
        targetType: 'inline'
        script: |
          mkdir -p $(System.DefaultWorkingDirectory)/terraform/environments/test
          cat > $(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars << 'EOF'
          tenant_id         = "$(tenant_id)"
          subscription_id   = "$(subscription_id)"
          client_id         = "$(client_id)"
          client_secret     = "$(client_secret)"
          resource_group    = "$(resourceGroup)"
          location          = "$(location)"
          address_space     = ["10.0.0.0/16"]
          virtual_network_name = "vnet-main"
          application_type  = "fakerest"
          address_prefix_test = "10.0.1.0/24"
          EOF

    # Terraform init
    - task: Bash@3
      displayName: 'Terraform init'
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/terraform/environments/test
          terraform init -no-color

    # Terraform validate
    - task: Bash@3
      displayName: 'Terraform validate'
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/terraform/environments/test
          terraform validate

    # Terraform apply
    - task: Bash@3
      displayName: 'Terraform apply (-var-file, -input=false)'
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/terraform/environments/test
          terraform apply -no-color -input=false -auto-approve -var-file="terraform.tfvars"

    # Archive tests/artifacts
    - task: PublishPipelineArtifact@1
      inputs:
        targetPath: '$(System.DefaultWorkingDirectory)/automatedtesting'
        artifact: 'automatedtesting'

# =========================
# DEPLOY & JMETER
# =========================
- stage: Deploy
  displayName: "Deploy & JMeter"
  dependsOn: Build
  jobs:
  - deployment: DeployInfrastructure
    displayName: "Deploy App & Load Test"
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: automatedtesting

          - task: AzureWebApp@1
            displayName: "Deploy Azure Web App"
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: '$(appServiceName)'
              package: '$(System.DefaultWorkingDirectory)/FakeRestAPI'

          - task: Bash@3
            displayName: "Run JMeter"
            inputs:
              targetType: 'inline'
              script: |
                /opt/jmeter/bin/jmeter -n -t $(System.DefaultWorkingDirectory)/automatedtesting/jmeter/Starter.jmx -l jmeter-results.jtl -e -o jmeter-report
                echo "JMeter completed"
          - task: PublishPipelineArtifact@1
            inputs:
              targetPath: 'jmeter-report'
              artifact: 'jmeter-report'

# =========================
# UI TESTS (SELENIUM)
# =========================
- stage: UITests
  displayName: "Selenium UI Tests"
  dependsOn: Deploy
  jobs:
  - deployment: RunUITests
    displayName: "Run Selenium Tests"
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - download: current
            artifact: automatedtesting
          - task: Bash@3
            displayName: "Run Selenium"
            inputs:
              targetType: 'inline'
              script: |
                python3 $(System.DefaultWorkingDirectory)/automatedtesting/selenium/login.py

# =========================
# CLEANUP
# =========================
- stage: Cleanup
  displayName: "Terraform destroy"
  dependsOn: UITests
  jobs:
  - job: DestroyInfrastructure
    displayName: "Destroy Resources"
    steps:
    - checkout: self
    - task: Bash@3
      displayName: 'Terraform destroy'
      inputs:
        targetType: 'inline'
        script: |
          cd $(System.DefaultWorkingDirectory)/terraform/environments/test
          terraform destroy -no-color -auto-approve -var-file="terraform.tfvars"
