trigger:
- main

pool:
  name: myAgentPool

variables:
  vmImageName: 'ubuntu-latest'
  azureServiceConnectionId: 'udacity-az-sp'
  resourceGroupName: 'myResourceGroup'
  location: 'eastus'
  storageAccount: 'tfstate$(Build.BuildId)'
  containerName: 'tfstate'
  tfstateFile: 'terraform.tfstate'
  appServiceName: 'fakerest-$(Build.BuildId)'
  environmentName: 'myEnvVM'

stages:
# ================================
# BUILD + TEST
# ================================
- stage: Build
  displayName: 'Build: Terraform + Package + API/Load'
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform & Package & Tests'
    steps:
    - checkout: self

    # 1. Install Terraform
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Install Terraform'
      inputs:
        terraformVersion: '1.6.6'

    # 2. Login to Azure & fetch storage key
    - task: AzureCLI@2
      displayName: 'Fetch Storage Key'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          key=$(az storage account keys list -g $(resourceGroupName) -n $(storageAccount) --query [0].value -o tsv)
          echo "##vso[task.setvariable variable=STORAGE_KEY;issecret=true]$key"

    # 3. Create backend.tf dynamically
    - script: |
        cat > $(System.DefaultWorkingDirectory)/terraform/environments/test/backend.tf <<EOF
        terraform {
          backend "azurerm" {
            resource_group_name  = "$(resourceGroupName)"
            storage_account_name = "$(storageAccount)"
            container_name       = "$(containerName)"
            key                  = "$(tfstateFile)"
            access_key           = "$(STORAGE_KEY)"
          }
        }
        EOF
      displayName: 'Write backend.tf'

    # 4. Terraform init (معدلة)
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'

    # 5. Terraform validate
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'

    # 6. Terraform apply
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        args: '-auto-approve'

    # 7. Run Postman tests
    - script: |
        npm install -g newman
        newman run automatedtesting/postman/RegressionTest.json -e automatedtesting/postman/RegressionTestEnv.json
      displayName: 'Run Postman Tests'

    # 8. Archive results
    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: '$(System.DefaultWorkingDirectory)'
        artifactName: 'drop'

# ================================
# DEPLOY
# ================================
- stage: Deploy
  displayName: 'Deploy App + JMeter'
  dependsOn: Build
  jobs:
  - job: DeployApp
    steps:
    - checkout: self

    - task: AzureCLI@2
      displayName: 'Deploy Azure Web App'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          az webapp up -g $(resourceGroupName) -n $(appServiceName) --sku B1 --runtime "DOTNET:6"

    - script: |
        /opt/jmeter/bin/jmeter -n -t automatedtesting/jmeter/Starter.jmx -l jmeter-results.jtl -e -o jmeter-report
      displayName: 'Run JMeter Tests'

    - task: PublishBuildArtifacts@1
      inputs:
        pathToPublish: 'jmeter-report'
        artifactName: 'jmeter-report'

# ================================
# UI TESTS
# ================================
- stage: UITests
  displayName: 'UI Tests on VM'
  dependsOn: Deploy
  jobs:
  - deployment: UITestDeployment
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - checkout: self
          - script: |
              python3 -m pip install --user selenium webdriver-manager
              python3 automatedtesting/selenium/login.py
            displayName: 'Run Selenium Tests'

# ================================
# CLEANUP
# ================================
- stage: Cleanup
  displayName: 'Cleanup Infrastructure'
  dependsOn: UITests
  jobs:
  - job: DestroyInfrastructure
    steps:
    - checkout: self

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
        args: '-auto-approve'
