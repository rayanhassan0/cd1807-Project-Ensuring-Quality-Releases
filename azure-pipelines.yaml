name: Azure Pipelines

trigger:
- main

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'udacity-az-sp'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  resourceGroup: 'Azuredevops'
  appServiceName: 'myapp-AppService'

stages:
# =============== BUILD ===============
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform + Postman + Package'
    steps:
    - task: AzureCLI@2
      displayName: 'Show Azure account'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail
          date -u +"UTC %Y-%m-%dT%H:%M:%SZ"
          az account show

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.13.1'

    - task: Bash@3
      displayName: 'Clean .terraform (ensure re-init)'
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          rm -rf "$(System.DefaultWorkingDirectory)/terraform/environments/test/.terraform"

    - task: Bash@3
      displayName: 'Debug: list terraform folder and modules'
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          ls -la "$(System.DefaultWorkingDirectory)/terraform/environments/test" || true
          ls -la "$(System.DefaultWorkingDirectory)/terraform/modules/appservice" || true
          ls -la "$(System.DefaultWorkingDirectory)/terraform/modules/network" || true
          sed -n '1,200p' "$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars" || true

    - task: AzureCLI@2
      displayName: 'Ensure backend storage exists'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -euxo pipefail
          RG="$(resourceGroup)"
          LOC="westus3"
          SA="tfstatebootstrap01"
          if ! az storage account show -g "$RG" -n "$SA" >/dev/null 2>&1; then
            az storage account create -g "$RG" -n "$SA" -l "$LOC" --sku Standard_LRS
          fi
          KEY=$(az storage account keys list -g "$RG" -n "$SA" --query "[0].value" -o tsv)
          az storage container create --name tfstate --account-name "$SA" --auth-mode key --account-key "$KEY" >/dev/null

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-out=tfplan -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-auto-approve -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: Bash@3
      displayName: 'Install CLI deps (zip, unzip, pip)'
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          need_zip=0;   command -v zip >/dev/null   || need_zip=1
          need_unzip=0; command -v unzip >/dev/null || need_unzip=1
          need_pip=0;   command -v pip3 >/dev/null  || need_pip=1
          if [ $need_zip -eq 0 ] && [ $need_unzip -eq 0 ] && [ $need_pip -eq 0 ]; then
            echo "zip/unzip/pip3 already installed"; exit 0; fi
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y zip unzip python3-pip
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y zip unzip python3-pip || sudo yum install -y zip unzip python3
          elif command -v dnf >/dev/null 2>&1; then
            sudo dnf install -y zip unzip python3-pip
          elif command -v zypper >/dev/null 2>&1; then
            sudo zypper install -y zip unzip python3-pip
          else
            echo "Unknown package manager" >&2; exit 1
          fi

    - task: NodeTool@0
      displayName: 'Use Node.js 18.x'
      inputs:
        versionSpec: '18.x'

    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'npm install -g newman'
        workingDirectory: '$(System.DefaultWorkingDirectory)'

    - task: Bash@3
      displayName: 'Prepare Postman results folder'
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          mkdir -p '$(Build.SourcesDirectory)/automatedtesting/postman/results'
          rm -f   '$(Build.SourcesDirectory)/automatedtesting/postman/results/'*.xml

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Data-Validation.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-DataValidation.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Regression.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-Regression.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish Postman JUnit Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/automatedtesting/postman/results'
        mergeTestResults: true
        testRunTitle: 'Postman Results'
        failTaskOnFailedTests: false

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests (Selenium)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip"
      displayName: 'Publish UI Tests Artifact'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip"
      displayName: 'Publish FakeRestAPI Artifact'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite (JMeter)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: "$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip"
      displayName: 'Publish Perf Tests Artifact'
      artifact: drop-perftests

# =============== DEPLOY ===============
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: FakeRestAPI
    displayName: 'Deploy App & Run JMeter'
    pool:
      name: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-fakerestapi

          - task: AzureWebApp@1
            displayName: 'Deploy Azure Web App'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              appName: '$(appServiceName)-$(Build.BuildId)'
              appType: 'webApp'
              package: '$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip'

          - task: Bash@3
            displayName: 'Warm up Web App'
            inputs:
              targetType: inline
              script: |
                set -euxo pipefail
                APPURL="https://$(appServiceName)-$(Build.BuildId).azurewebsites.net"
                for i in $(seq 1 40); do
                  if curl -fsS -m 5 "$APPURL" >/dev/null; then
                    echo "App is responding (try $i)"; exit 0; fi
                  echo "Waiting for app (try $i) ..."
                  sleep 5
                done
                echo "App did not respond in time"; exit 1

          - download: current
            artifact: drop-perftests

          - task: Bash@3
            displayName: 'Run JMeter (Performance)'
            timeoutInMinutes: 30
            inputs:
              targetType: inline
              script: |
                set -euxo pipefail
                cd "$(Pipeline.Workspace)"
                mkdir -p perf && cd perf

                if ! command -v java >/dev/null 2>&1; then
                  if command -v apt-get >/dev/null 2>&1; then
                    sudo apt-get update -y && sudo apt-get install -y openjdk-11-jre-headless
                  else
                    sudo yum install -y java-11-openjdk
                  fi
                fi

                JM_VER=5.6.3
                curl -L --fail -o apache-jmeter.tgz "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JM_VER}.tgz"
                tar -xzf apache-jmeter.tgz
                JM="$(pwd)/apache-jmeter-${JM_VER}"

                unzip -o "$(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip" -d perftests
                if [ -f "perftests/Starter.jmx" ]; then
                  JMX="perftests/Starter.jmx"
                elif [ -f "perftests/PerformanceTestSuite.jmx" ]; then
                  JMX="perftests/PerformanceTestSuite.jmx"
                else
                  echo "JMeter JMX not found under perftests/"; ls -la perftests; exit 1
                fi

                APPURL="https://$(appServiceName)-$(Build.BuildId).azurewebsites.net"
                curl -I --max-time 10 -sS "$APPURL" || true

                export JVM_ARGS="-Xms256m -Xmx512m -Djava.awt.headless=true"
                DURATION=30
                THREADS=8
                RAMPUP=8
                echo "Starting standalone test @ $(date -u +'%Y-%m-%dT%H:%M:%SZ')"

                set +e
                "$JM/bin/jmeter" -n -t "$JMX" \
                  -JAPPSERVICEURL="$APPURL" \
                  -JAPP_URL="$APPURL" \
                  -JBASE_URL="$APPURL" \
                  -JTARGET_URL="$APPURL" \
                  -Jhost="$(echo "$APPURL" | sed -E 's#https?://([^/]+)/?.*#\1#')" \
                  -Jprotocol="$(echo "$APPURL" | sed -E 's#(https?)://.*#\1#')" \
                  -Jport="" \
                  -JdurationSeconds="$DURATION" \
                  -Jthreads="$THREADS" \
                  -Jrampup="$RAMPUP" \
                  -Jsummariser.name=summary \
                  -Jjmeter.save.saveservice.output_format=csv \
                  -l perftests/results.jtl \
                  -e -o perftests/html-report
                JM_EXIT=$?
                set -e

                SAMPLES=0
                if [ -s perftests/results.jtl ]; then
                  SAMPLES=$(awk -F, 'NR>1 && $1!="" {c++} END{print c+0}' perftests/results.jtl)
                fi
                echo "Samples counted: $SAMPLES (exit=$JM_EXIT)"

                if [ "$SAMPLES" -eq 0 ]; then
                  echo "No samples from provided JMX; running fallback smoke test..."
                  cat > smoke.jmx <<'XML'
<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="SmokePlan" enabled="true">
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments">
        <collectionProp name="Arguments.arguments"/>
      </elementProp>
    </TestPlan>
    <hashTree>
      <ThreadGroup guiclass="ThreadGroupGui" testclass="ThreadGroup" testname="Users" enabled="true">
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="ThreadGroup.num_threads">8</stringProp>
        <stringProp name="ThreadGroup.ramp_time">8</stringProp>
        <boolProp name="ThreadGroup.scheduler">false</boolProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" enabled="true">
          <boolProp name="LoopController.continue_forever">false</boolProp>
          <stringProp name="LoopController.loops">10</stringProp>
        </elementProp>
      </ThreadGroup>
      <hashTree>
        <ConfigTestElement guiclass="HttpDefaultsGui" testclass="ConfigTestElement" testname="HTTP Request Defaults" enabled="true"/>
        <hashTree/>
        <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="GET /" enabled="true">
          <stringProp name="HTTPSampler.path">/</stringProp>
          <stringProp name="HTTPSampler.method">GET</stringProp>
          <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
          <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
        </HTTPSamplerProxy>
        <hashTree/>
      </hashTree>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
XML
                  PROTO=$(echo "$APPURL" | sed -E 's#(https?)://.*#\1#')
                  HOST=$(echo "$APPURL" | sed -E 's#https?://([^/:]+).*#\1#')
                  PORT=""
                  "$JM/bin/jmeter" -n -t smoke.jmx \
                    -JHTTPSampler.protocol="$PROTO" \
                    -JHTTPSampler.domain="$HOST" \
                    -JHTTPSampler.port="$PORT" \
                    -Jjmeter.save.saveservice.output_format=csv \
                    -l perftests/results.jtl \
                    -e -o perftests/html-report
                fi

                if [ ! -f perftests/html-report/index.html ]; then
                  echo "<html><body><h2>No JMeter data written to results.jtl</h2></body></html>" > perftests/html-report/index.html
                fi

                find perftests -maxdepth 2 -type f | sort

          - task: PublishPipelineArtifact@1
            displayName: 'Publish JMeter HTML Report'
            inputs:
              targetPath: '$(Pipeline.Workspace)/perf/perftests/html-report'
              artifact: 'jmeter-report'

  - job: SeleniumUITests
    displayName: 'Selenium UI Tests'
    pool:
      name: myAgentPool
    steps:
    - download: current
      artifact: drop-uitests

    - task: Bash@3
      displayName: 'Run Selenium'
      timeoutInMinutes: 12
      inputs:
        targetType: 'inline'
        script: |
          set -euxo pipefail
          mkdir -p "$HOME/selenium"
          unzip -o "$(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip" -d "$HOME/selenium"
          sudo apt-get update -y
          sudo apt-get purge -y chromium-browser chromium-chromedriver || true
          if ! command -v /snap/bin/chromium >/dev/null 2>&1; then
            sudo snap install chromium --channel=latest/stable
          fi
          for i in 1 2 3 4 5; do
            if [ -x /snap/bin/chromium.chromedriver ]; then break; fi
            echo "Waiting for /snap/bin/chromium.chromedriver (attempt $i) ..."
            sleep 3
          done
          export PATH="/snap/bin:$PATH"
          export CHROME_BIN="/snap/bin/chromium"
          export CHROMEDRIVER="/snap/bin/chromium.chromedriver"
          "$CHROME_BIN" --version || true
          "$CHROMEDRIVER" --version || true
          ulimit -n 4096 || true
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user -r "$HOME/selenium/requirements.txt"
          export DEMO_URL="https://www.saucedemo.com/"
          export DEMO_USER="standard_user"
          export DEMO_PASS="secret_sauce"
          mkdir -p "$HOME/selenium/logs"
          date -u +"UTC %Y-%m-%dT%H:%M:%SZ" | tee "$HOME/selenium/logs/started_at.txt"
          timeout --preserve-status 4m \
            python3 "$HOME/selenium/login.py" 2>&1 | tee "$HOME/selenium/logs/selenium.out"
          echo "Selenium finished."

    - task: PublishPipelineArtifact@1
      displayName: 'Publish Selenium logs'
      inputs:
        targetPath: '$(HOME)/selenium/logs'
        artifact: 'selenium-logs'

# =============== CLEANUP ===============
- stage: Cleanup
  displayName: 'Terraform Destroy'
  dependsOn: Deploy
  condition: always()
  jobs:
  - job: Destroy
    pool:
      name: myAgentPool
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation (Cleanup)'
      inputs:
        terraformVersion: '1.13.1'

    - task: Bash@3
      displayName: 'Clean .terraform (Cleanup)'
      inputs:
        targetType: inline
        script: |
          set -euxo pipefail
          rm -rf "$(System.DefaultWorkingDirectory)/terraform/environments/test/.terraform"

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init (Cleanup)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-auto-approve -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
