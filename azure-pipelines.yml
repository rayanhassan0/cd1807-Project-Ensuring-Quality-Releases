name: Azure Pipelines
trigger:
- main

pool:
  name: myAgentPool

variables:
  DEMO_URL: 'https://www.saucedemo.com/'

stages:
- stage: Observe
  displayName: 'Selenium UI + Ship Logs (Fast)'
  jobs:
  - job: SeleniumUITests
    displayName: 'Run Selenium + Ship Log to Azure Monitor'
    pool:
      name: myAgentPool
    steps:
    - task: Bash@3
      displayName: 'Run Selenium (unique Chrome profile)'
      timeoutInMinutes: 10
      inputs:
        targetType: inline
        script: |
          set -euo pipefail

          SRC_DIR="$(Build.SourcesDirectory)/automatedtesting/selenium"
          mkdir -p "$HOME/selenium"
          cp -r "$SRC_DIR"/. "$HOME/selenium/" || true

          pkill -f chrome || true
          pkill -f chromium || true

          sudo apt-get update -y
          sudo apt-get purge -y chromium-browser chromium-chromedriver || true
          if ! command -v /snap/bin/chromium >/dev/null 2>&1; then
            sudo snap install chromium --channel=latest/stable
          fi
          for i in 1 2 3 4 5; do
            if [ -x /snap/bin/chromium.chromedriver ]; then break; fi
            echo "Waiting for /snap/bin/chromium.chromedriver (attempt $i) ..."
            sleep 3
          done
          export PATH="/snap/bin:$PATH"

          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user selenium==4.21.0 webdriver-manager==4.0.2

          export CHROME_PROFILE_DIR="$HOME/selenium/profile-$BUILD_BUILDID"
          rm -rf "$CHROME_PROFILE_DIR" || true
          mkdir -p "$CHROME_PROFILE_DIR"
          sudo mkdir -p /dev/shm || true

          cat > "$HOME/selenium/runner.py" <<'PY'
          import os, random
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from webdriver_manager.chrome import ChromeDriverManager

          url = os.environ.get("DEMO_URL", "https://www.saucedemo.com/")
          profile = os.environ.get("CHROME_PROFILE_DIR", "/tmp/selenium-profile")

          opts = Options()
          opts.add_argument("--headless=new")
          opts.add_argument("--no-sandbox")
          opts.add_argument("--disable-dev-shm-usage")
          opts.add_argument("--disable-gpu")
          opts.add_argument("--disable-extensions")
          opts.add_argument("--window-size=1280,900")
          opts.add_argument(f"--user-data-dir={profile}")
          opts.add_argument(f"--remote-debugging-port={random.randint(9222,9322)}")
          opts.binary_location = "/snap/bin/chromium"

          print("Starting the browser...")
          driver = webdriver.Chrome(ChromeDriverManager().install(), options=opts)
          driver.get(url)
          print("PAGE_TITLE=", driver.title)
          print("Object removed from the cart; suite=CartSuite")
          driver.quit()
          PY

          export DEMO_URL="$(DEMO_URL)"
          mkdir -p "$HOME/selenium/logs"
          echo "=== Starting Selenium with timeout (4m) ==="
          set +e
          timeout --preserve-status 4m python3 "$HOME/selenium/runner.py" 2>&1 | tee "$HOME/selenium/logs/selenium.out"
          EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "Selenium finished with exit code: $EXIT_CODE"

    - task: Bash@3
      displayName: 'Ship Selenium logs (2 writes, fixed HMAC)'
      inputs:
        targetType: inline
        script: |
          set -euo pipefail

          # تعطيل أي بروكسيات قد تغيّر الوجهة
          unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY all_proxy ALL_PROXY no_proxy NO_PROXY

          # --- Workspace creds (hardcoded للسكرين-شوت) ---
          LAW_ID="da6e0b1f-7a68-4ef3-8b12-be42177ac070"
          LAW_KEY_B64="CTBND0JmLc1N+Dd4Po07MzVB/zvD4jVWtnLN41Ul0mCSeJqX9izqCNv4juji/zGLJY01vHkS48PpvHJZDfe45A=="
          # ------------------------------------------------

          # Sanitize + تحقق من الـ GUID
          LAW_ID="$(printf '%s' "$LAW_ID" | tr -d ' \r\n\t')"
          LAW_KEY_B64="$(printf '%s' "$LAW_KEY_B64" | tr -d ' \r\n\t')"
          printf '%s' "$LAW_ID" | grep -Eq '^[0-9a-fA-F-]{36}$' || { echo "ERROR: LAW_ID must be GUID."; exit 1; }

          # فكّ الـ Base64 إلى HEX لاستخدامه كمفتاح HMAC سليم
          KEY_HEX="$(printf '%s' "$LAW_KEY_B64" | base64 -d 2>/dev/null | xxd -p -c 256)" || { echo "ERROR: invalid base64 key"; exit 1; }
          [ -n "$KEY_HEX" ] || { echo "ERROR: empty hex key"; exit 1; }

          CONTENT_TYPE="application/json"
          RFC_DATE="$(LC_ALL=C date -u +"%a, %d %b %Y %H:%M:%S GMT")"
          RESOURCE="/api/logs"
          HOST="https://${LAW_ID}.ods.opinsights.azure.com${RESOURCE}?api-version=2016-04-01"

          send_log () {
            local LOGTYPE="$1" BODY="$2" ADD_TIME_HEADER="$3"
            local LEN STRING_TO_SIGN SIG AUTH CODE
            LEN=$(printf "%s" "$BODY" | wc -c | tr -d ' ')
            STRING_TO_SIGN=$(printf "POST\n%s\n%s\nx-ms-date:%s\n%s" "$LEN" "$CONTENT_TYPE" "$RFC_DATE" "$RESOURCE")
            SIG=$(printf "%s" "$STRING_TO_SIGN" | iconv -t UTF-8 | openssl dgst -sha256 -mac HMAC -macopt "hexkey:$KEY_HEX" -binary | base64)
            AUTH="SharedKey ${LAW_ID}:${SIG}"

            if [ "$ADD_TIME_HEADER" = "yes" ]; then
              CODE=$(curl -sS -o /tmp/la.out -w "%{http_code}" -X POST "$HOST" --noproxy '*' \
                -H "Content-Type: ${CONTENT_TYPE}" \
                -H "Log-Type: ${LOGTYPE}" \
                -H "x-ms-date: ${RFC_DATE}" \
                -H "Authorization: ${AUTH}" \
                -H "time-generated-field: when" \
                --data-binary "$BODY")
            else
              CODE=$(curl -sS -o /tmp/la.out -w "%{http_code}" -X POST "$HOST" --noproxy '*' \
                -H "Content-Type: ${CONTENT_TYPE}" \
                -H "Log-Type: ${LOGTYPE}" \
                -H "x-ms-date: ${RFC_DATE}" \
                -H "Authorization: ${AUTH}" \
                --data-binary "$BODY")
            fi

            echo "$CODE"
          }

          # 1) مع time-generated-field  -> جدول Selenium_Log_CL
          NOW_UTC="$(LC_ALL=C date -u +"%Y-%m-%dT%H:%M:%SZ")"
          BODY1="[ { \"message\":\"Object removed from the cart\", \"suite\":\"CartSuite\", \"level\":\"INFO\", \"when\":\"${NOW_UTC}\", \"buildId\":\"${BUILD_BUILDID}\" } ]"
          CODE1=$(send_log "Selenium_Log" "$BODY1" "yes")
          echo "POST#1 Status: $CODE1"; head -c 300 /tmp/la.out || true; echo

          # 2) بدون time-generated-field -> جدول SeleniumLog_CL (يستخدم وقت الإدخال)
          BODY2="[ { \"message\":\"cart event (ingestion time)\", \"suite\":\"CartSuite\", \"level\":\"INFO\", \"buildId\":\"${BUILD_BUILDID}\" } ]"
          CODE2=$(send_log "SeleniumLog" "$BODY2" "no")
          echo "POST#2 Status: $CODE2"; head -c 300 /tmp/la.out || true; echo

          # اعتبر النجاح إذا واحد منهما رجع 200/202
          if [ "$CODE1" = "200" ] || [ "$CODE1" = "202" ] || [ "$CODE2" = "200" ] || [ "$CODE2" = "202" ]; then
            echo "OK: at least one record ingested"
          else
            echo "ERROR: both posts failed ($CODE1, $CODE2)"; exit 1;
          fi
