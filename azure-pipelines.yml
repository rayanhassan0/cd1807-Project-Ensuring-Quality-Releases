name: Azure Pipelines

trigger:
- main

pool:
  name: myAgentPool

variables:
  python.version: '3.7.6'
  azureServiceConnectionId: 'udacity-az-sp'
  projectRoot: $(System.DefaultWorkingDirectory)
  environmentName: 'test'
  resourceGroup: 'Azuredevops'
  appServiceName: 'myapp-AppService'

stages:
# =============== BUILD ===============
- stage: Build
  jobs:
  - job: BuildInfrastructure
    displayName: 'Terraform + Postman + Package'
    steps:
    - task: AzureCLI@2
      displayName: 'Show Azure account'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: az account show

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation'
      inputs:
        terraformVersion: '1.13.1'

    - task: Bash@3
      displayName: 'Clean .terraform (ensure re-init)'
      inputs:
        targetType: inline
        script: |
          set -e
          rm -rf "$(System.DefaultWorkingDirectory)/terraform/environments/test/.terraform"

    - task: Bash@3
      displayName: 'Debug: list terraform folders'
      inputs:
        targetType: inline
        script: |
          set -e
          echo "---- env test ----"
          ls -la "$(System.DefaultWorkingDirectory)/terraform/environments/test"
          echo "---- modules/appservice ----"
          ls -la "$(System.DefaultWorkingDirectory)/terraform/modules/appservice" || true
          echo "---- modules/network ----"
          ls -la "$(System.DefaultWorkingDirectory)/terraform/modules/network" || true
          echo "---- terraform.tfvars ----"
          sed -n '1,200p' "$(System.DefaultWorkingDirectory)/terraform/environments/test/terraform.tfvars"

    - task: AzureCLI@2
      displayName: 'Ensure backend storage exists'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          RG="$(resourceGroup)"
          LOC="westus3"
          SA="tfstatebootstrap01"
          echo "Ensure SA=$SA RG=$RG LOC=$LOC"
          if ! az storage account show -g "$RG" -n "$SA" >/dev/null 2>&1; then
            az storage account create -g "$RG" -n "$SA" -l "$LOC" --sku Standard_LRS
          fi
          KEY=$(az storage account keys list -g "$RG" -n "$SA" --query "[0].value" -o tsv)
          az storage container create --name tfstate --account-name "$SA" --auth-mode key --account-key "$KEY" >/dev/null
          echo "Backend ready."

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: AzureCLI@2
      displayName: 'TF import existing resources (one-time)'
      inputs:
        azureSubscription: '$(azureServiceConnectionId)'
        scriptType: bash
        scriptLocation: inlineScript
        inlineScript: |
          set -e
          cd "$(System.DefaultWorkingDirectory)/terraform/environments/test"
          terraform import -input=false 'module.network.azurerm_virtual_network.vnet' \
            '/subscriptions/538cf8ed-3aac-4da8-84f9-3bc3a7a6869b/resourceGroups/Azuredevops/providers/Microsoft.Network/virtualNetworks/vnet-test' || true
          terraform import -input=false 'module.network.azurerm_subnet.subnet_test' \
            '/subscriptions/538cf8ed-3aac-4da8-84f9-3bc3a7a6869b/resourceGroups/Azuredevops/providers/Microsoft.Network/virtualNetworks/vnet-test/subnets/subnet-test' || true
          terraform import -input=false 'module.appservice.azurerm_service_plan.plan' \
            '/subscriptions/538cf8ed-3aac-4da8-84f9-3bc3a7a6869b/resourceGroups/Azuredevops/providers/Microsoft.Web/serverFarms/myapp-plan' || true
          terraform state list || true

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform validate'
      inputs:
        provider: 'azurerm'
        command: 'validate'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform plan'
      inputs:
        provider: 'azurerm'
        command: 'plan'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-out=tfplan -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform apply'
      inputs:
        provider: 'azurerm'
        command: 'apply'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-auto-approve -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'

    - task: Bash@3
      displayName: 'Install CLI deps (zip, unzip, pip)'
      inputs:
        targetType: inline
        script: |
          set -e
          if command -v apt-get >/dev/null 2>&1; then
            sudo apt-get update -y
            sudo apt-get install -y zip unzip python3-pip
          elif command -v yum >/dev/null 2>&1; then
            sudo yum install -y zip unzip python3-pip
          else
            echo "Unknown package manager; please install zip/unzip manually" >&2
            exit 1
          fi

    - task: NodeTool@0
      displayName: 'Use Node.js 18.x'
      inputs:
        versionSpec: '18.x'

    - task: CmdLine@2
      displayName: 'Install Newman'
      inputs:
        script: 'npm install -g newman'
        workingDirectory: $(System.DefaultWorkingDirectory)

    - task: Bash@3
      displayName: 'Prepare Postman results folder'
      inputs:
        targetType: inline
        script: |
          set -e
          mkdir -p '$(Build.SourcesDirectory)/automatedtesting/postman/results'
          rm -f   '$(Build.SourcesDirectory)/automatedtesting/postman/results/'*.xml

    - task: CmdLine@2
      displayName: 'Run Data Validation Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Data-Validation.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-DataValidation.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: CmdLine@2
      displayName: 'Run Regression Tests'
      continueOnError: true
      inputs:
        script: |
          newman run TestSuite.Regression.json \
                 -e Test.environment.json \
                 --reporters cli,junit \
                 --reporter-junit-export "$(Build.SourcesDirectory)/automatedtesting/postman/results/TEST-Regression.xml" || true
        workingDirectory: '$(Build.SourcesDirectory)/automatedtesting/postman'

    - task: PublishTestResults@2
      displayName: 'Publish Postman JUnit Results'
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '*.xml'
        searchFolder: '$(Build.SourcesDirectory)/automatedtesting/postman/results'
        mergeTestResults: true
        testRunTitle: 'Postman Results'
        failTaskOnFailedTests: false

    - task: ArchiveFiles@2
      displayName: 'Archive UI Tests (Selenium)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-uitests.zip
      displayName: 'Publish UI Tests Artifact'
      artifact: drop-uitests

    - task: ArchiveFiles@2
      displayName: 'Archive FakeRestAPI'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
      displayName: 'Publish FakeRestAPI Artifact'
      artifact: drop-fakerestapi

    - task: ArchiveFiles@2
      displayName: 'Archive PerformanceTestSuite (JMeter)'
      inputs:
        rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip'
    - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-perftests.zip
      displayName: 'Publish Perf Tests Artifact'
      artifact: drop-perftests

    # Prepare JMeter once and publish as artifact
    - task: Bash@3
      displayName: 'Download JMeter binary (once)'
      inputs:
        targetType: inline
        script: |
          set -e
          JM_VER=5.6.3
          mkdir -p "$(Build.ArtifactStagingDirectory)/jmeter"
          cd "$(Build.ArtifactStagingDirectory)/jmeter"
          echo "Fetching JMeter $JM_VER ..."
          for URL in \
            "https://archive.apache.org/dist/jmeter/binaries/apache-jmeter-${JM_VER}.tgz" \
            "https://downloads.apache.org/jmeter/binaries/apache-jmeter-${JM_VER}.tgz" ; do
            echo "Trying $URL"
            curl -L --fail --retry 8 --retry-connrefused --connect-timeout 10 --max-time 600 -o apache-jmeter.tgz "$URL" && break || true
          done
          [ -s apache-jmeter.tgz ] || { echo "Failed to download JMeter"; exit 1; }
          tar -xzf apache-jmeter.tgz
          rm -f apache-jmeter.tgz
          ls -la
    - publish: $(Build.ArtifactStagingDirectory)/jmeter
      displayName: 'Publish JMeter binary artifact'
      artifact: jmeter-bin

# =============== DEPLOY ===============
- stage: Deploy
  dependsOn: Build
  jobs:
  - deployment: FakeRestAPI
    displayName: 'Deploy App & Run JMeter'
    pool:
      name: myAgentPool
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - download: current
            artifact: drop-fakerestapi

          - bash: |
              set -e
              ls -lh "$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
            displayName: 'Show package size'

          # Deploy without Kudu: WEBSITE_RUN_FROM_PACKAGE via Blob SAS
          - task: AzureCLI@2
            displayName: 'Deploy via Run-From-Package (Blob SAS)'
            inputs:
              azureSubscription: '$(azureServiceConnectionId)'
              scriptType: bash
              scriptLocation: inlineScript
              inlineScript: |
                set -e
                RG="$(resourceGroup)"
                APP="$(appServiceName)-$(Build.BuildId)"
                SA="tfstatebootstrap01"
                CN="webpackages"
                ZIP="$(Pipeline.Workspace)/drop-fakerestapi/$(Build.BuildId)-fakerestapi.zip"
                BLOB="$(Build.BuildId)-fakerestapi.zip"

                KEY=$(az storage account keys list -g "$RG" -n "$SA" --query "[0].value" -o tsv)
                az storage container create --account-name "$SA" --name "$CN" --account-key "$KEY" --auth-mode key >/dev/null

                echo "Upload package to blob..."
                az storage blob upload \
                  --account-name "$SA" --account-key "$KEY" \
                  --container-name "$CN" --name "$BLOB" \
                  --file "$ZIP" --overwrite true --auth-mode key

                echo "Generate read-only SAS for 7 days..."
                EXP="$(date -u -d '+7 days' +'%Y-%m-%dT%H:%MZ')"
                SAS=$(az storage blob generate-sas \
                  --account-name "$SA" --account-key "$KEY" \
                  --container-name "$CN" --name "$BLOB" \
                  --permissions r --expiry "$EXP" -o tsv)

                URL="https://$SA.blob.core.windows.net/$CN/$BLOB?$SAS"
                echo "Set WEBSITE_RUN_FROM_PACKAGE to SAS URL"
                az webapp config appsettings set -g "$RG" -n "$APP" \
                  --settings WEBSITE_RUN_FROM_PACKAGE="$URL" SCM_DO_BUILD_DURING_DEPLOYMENT=false ENABLE_ORYX_BUILD=false

                echo "Restart app"
                az webapp restart -g "$RG" -n "$APP"

          - task: Bash@3
            displayName: 'Warm up app'
            inputs:
              targetType: inline
              script: |
                set -e
                APPURL="https://$(appServiceName)-$(Build.BuildId).azurewebsites.net"
                echo "Warming $APPURL ..."
                for i in {1..30}; do
                  code=$(curl -s -o /dev/null -w "%{http_code}" "$APPURL")
                  echo "Warm attempt $i: $code"
                  if [ "$code" = "200" ]; then
                    echo "Warm!"
                    exit 0
                  fi
                  sleep 5
                done
                echo "App not warm yet; continuing..."

          - download: current
            artifact: drop-perftests

          - download: current
            artifact: jmeter-bin

          - task: Bash@3
            displayName: 'Run JMeter (Performance)'
            timeoutInMinutes: 30
            inputs:
              targetType: inline
              script: |
                set -e
                cd "$(Pipeline.Workspace)"
                mkdir -p perf && cd perf

                JM_VER=5.6.3
                JM="$(Pipeline.Workspace)/jmeter-bin/apache-jmeter-${JM_VER}"
                if [ ! -x "$JM/bin/jmeter" ]; then
                  echo "JMeter not found at $JM" && ls -la "$(Pipeline.Workspace)/jmeter-bin" && exit 1
                fi

                unzip -o "$(Pipeline.Workspace)/drop-perftests/$(Build.BuildId)-perftests.zip" -d perftests

                if [ -f "perftests/Starter.jmx" ]; then
                  JMX="perftests/Starter.jmx"
                elif [ -f "perftests/PerformanceTestSuite.jmx" ]; then
                  JMX="perftests/PerformanceTestSuite.jmx"
                else
                  echo "JMeter JMX not found under perftests/." && ls -la perftests && exit 1
                fi

                APPURL="https://$(appServiceName)-$(Build.BuildId).azurewebsites.net"
                echo "Starting standalone test @ $(date -u +'%Y-%m-%dT%H:%M:%SZ')"
                set +e
                "$JM/bin/jmeter" -n -t "$JMX" \
                  -JAPPSERVICEURL="$APPURL" \
                  -JAPP_URL="$APPURL" \
                  -JBASE_URL="$APPURL" \
                  -Jsummariser.name=summary \
                  -l perftests/results.jtl
                JM_EXIT=$?
                set -e

                mkdir -p perftests/html-report
                if [ -s perftests/results.jtl ]; then
                  "$JM/bin/jmeter" -g perftests/results.jtl -o perftests/html-report || true
                else
                  echo "<html><body><h2>No JMeter data written to results.jtl</h2></body></html>" > perftests/html-report/index.html
                fi
                echo "JMeter finished with exit code: $JM_EXIT"

          - task: PublishPipelineArtifact@1
            displayName: 'Publish JMeter HTML Report'
            inputs:
              targetPath: '$(Pipeline.Workspace)/perf/perftests/html-report'
              artifact: 'jmeter-report'

  - job: SeleniumUITests
    displayName: 'Selenium UI Tests'
    pool:
      name: myAgentPool
    steps:
    - download: current
      artifact: drop-uitests

    - task: Bash@3
      displayName: 'Run Selenium'
      timeoutInMinutes: 10
      inputs:
        targetType: inline
        script: |
          set -e
          mkdir -p "$HOME/selenium"
          unzip -o "$(Pipeline.Workspace)/drop-uitests/$(Build.BuildId)-uitests.zip" -d "$HOME/selenium"

          sudo apt-get update -y
          sudo apt-get purge -y chromium-browser chromium-chromedriver || true

          if ! command -v /snap/bin/chromium >/dev/null 2>&1; then
            sudo snap install chromium --channel=latest/stable
          fi

          for i in 1 2 3 4 5; do
            if [ -x /snap/bin/chromium.chromedriver ]; then break; fi
            echo "Waiting for /snap/bin/chromium.chromedriver (attempt $i) ..."
            sleep 3
          done

          export PATH="/snap/bin:$PATH"
          export CHROME_BIN="/snap/bin/chromium"
          export CHROMEDRIVER="/snap/bin/chromium.chromedriver"

          "$CHROME_BIN" --version || true
          "$CHROMEDRIVER" --version || true

          ulimit -n 4096 || true

          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user -r "$HOME/selenium/requirements.txt"

          export DEMO_URL="https://www.saucedemo.com/"
          export DEMO_USER="standard_user"
          export DEMO_PASS="secret_sauce"

          mkdir -p "$HOME/selenium/logs"
          echo "=== Starting Selenium with timeout (4m) ==="
          timeout --preserve-status 4m \
            python3 "$HOME/selenium/login.py" 2>&1 | tee "$HOME/selenium/logs/selenium.out"

          echo "Selenium finished."

# =============== CLEANUP ===============
- stage: Cleanup
  displayName: 'Terraform Destroy'
  dependsOn: Deploy
  condition: always()
  jobs:
  - job: Destroy
    pool:
      name: myAgentPool
    steps:
    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-installer-task.TerraformInstaller@0
      displayName: 'Terraform installation (Cleanup)'
      inputs:
        terraformVersion: '1.13.1'

    - task: Bash@3
      displayName: 'Clean .terraform (Cleanup)'
      inputs:
        targetType: inline
        script: |
          set -e
          rm -rf "$(System.DefaultWorkingDirectory)/terraform/environments/test/.terraform"

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform init (Cleanup)'
      inputs:
        provider: 'azurerm'
        command: 'init'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        backendServiceArm: '$(azureServiceConnectionId)'
        backendAzureRmResourceGroupName: '$(resourceGroup)'
        backendAzureRmStorageAccountName: 'tfstatebootstrap01'
        backendAzureRmContainerName: 'tfstate'
        backendAzureRmKey: 'test.terraform.tfstate'
        backendAzureRmUseOidc: false
        backendAzureRmUseMsi: false

    - task: ms-devlabs.custom-terraform-tasks.custom-terraform-release-task.TerraformTaskV3@3
      displayName: 'Terraform destroy'
      inputs:
        provider: 'azurerm'
        command: 'destroy'
        workingDirectory: '$(System.DefaultWorkingDirectory)/terraform/environments/test'
        commandOptions: '-auto-approve -var="app_service_name=$(appServiceName)-$(Build.BuildId)"'
        environmentServiceNameAzureRM: '$(azureServiceConnectionId)'
