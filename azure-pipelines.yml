name: Azure Pipelines
trigger:
- main

pool:
  name: myAgentPool

variables:
  # سكرتين لازم تضيفهم في Variables كـ secret:
  # - logAnalytics.workspaceId  (Workspace/Customer ID - GUID)
  # - logAnalytics.sharedKey    (Primary Key)
  DEMO_URL: 'https://www.saucedemo.com/'

stages:
- stage: Observe
  displayName: 'Selenium UI + Ship Logs (Fast)'
  jobs:
  - job: SeleniumUITests
    displayName: 'Run Selenium + Ship Log to Azure Monitor'
    pool:
      name: myAgentPool
    steps:
    - task: Bash@3
      displayName: 'Run Selenium (unique Chrome profile)'
      timeoutInMinutes: 10
      inputs:
        targetType: inline
        script: |
          set -euo pipefail

          SRC_DIR="$(Build.SourcesDirectory)/automatedtesting/selenium"
          mkdir -p "$HOME/selenium"
          cp -r "$SRC_DIR"/. "$HOME/selenium/" || true

          # Clean old chrome processes
          pkill -f chrome || true
          pkill -f chromium || true

          # Ensure chromium via snap (one-time on agent VM)
          sudo apt-get update -y
          sudo apt-get purge -y chromium-browser chromium-chromedriver || true
          if ! command -v /snap/bin/chromium >/dev/null 2>&1; then
            sudo snap install chromium --channel=latest/stable
          fi
          for i in 1 2 3 4 5; do
            if [ -x /snap/bin/chromium.chromedriver ]; then break; fi
            echo "Waiting for /snap/bin/chromium.chromedriver (attempt $i) ..."
            sleep 3
          done
          export PATH="/snap/bin:$PATH"

          # Python deps (user scope)
          python3 -m pip install --user --upgrade pip
          python3 -m pip install --user selenium==4.21.0 webdriver-manager==4.0.2

          # Unique Chrome profile per build
          export CHROME_PROFILE_DIR="$HOME/selenium/profile-$BUILD_BUILDID"
          rm -rf "$CHROME_PROFILE_DIR" || true
          mkdir -p "$CHROME_PROFILE_DIR"
          sudo mkdir -p /dev/shm || true

          # Minimal runner (يطبع سطر واضح للاقتباس في Log Analytics)
          cat > "$HOME/selenium/runner.py" <<'PY'
          import os, random
          from selenium import webdriver
          from selenium.webdriver.chrome.options import Options
          from webdriver_manager.chrome import ChromeDriverManager

          url = os.environ.get("DEMO_URL", "https://www.saucedemo.com/")
          profile = os.environ.get("CHROME_PROFILE_DIR", "/tmp/selenium-profile")

          opts = Options()
          opts.add_argument("--headless=new")
          opts.add_argument("--no-sandbox")
          opts.add_argument("--disable-dev-shm-usage")
          opts.add_argument("--disable-gpu")
          opts.add_argument("--disable-extensions")
          opts.add_argument("--window-size=1280,900")
          opts.add_argument(f"--user-data-dir={profile}")
          opts.add_argument(f"--remote-debugging-port={random.randint(9222,9322)}")
          opts.binary_location = "/snap/bin/chromium"

          print("Starting the browser...")
          driver = webdriver.Chrome(ChromeDriverManager().install(), options=opts)
          driver.get(url)
          print("PAGE_TITLE=", driver.title)
          # السطر الذي سنبحث عنه في Log Analytics:
          print("Object removed from the cart; suite=CartSuite")
          driver.quit()
          PY

          export DEMO_URL="$(DEMO_URL)"
          mkdir -p "$HOME/selenium/logs"
          echo "=== Starting Selenium with timeout (4m) ==="
          set +e
          timeout --preserve-status 4m \
            python3 "$HOME/selenium/runner.py" 2>&1 | tee "$HOME/selenium/logs/selenium.out"
          EXIT_CODE=${PIPESTATUS[0]}
          set -e
          echo "Selenium finished with exit code: $EXIT_CODE"

    - task: Bash@3
      displayName: 'Ship Selenium log to Log Analytics'
      env:
        LAW_ID: $(logAnalytics.workspaceId)   # Secret
        LAW_KEY: $(logAnalytics.sharedKey)    # Secret
      inputs:
        targetType: inline
        script: |
          set -euo pipefail

          # عطّل أي بروكسيات قد تعيد 404 HTML
          unset http_proxy https_proxy HTTP_PROXY HTTPS_PROXY all_proxy ALL_PROXY no_proxy NO_PROXY

          # Sanitize inputs
          LAW_ID="$(printf '%s' "${LAW_ID:-}" | tr -d ' \r\n\t')"
          LAW_KEY_B64="$(printf '%s' "${LAW_KEY:-}" | tr -d ' \r\n\t')"

          # Validate ID is GUID
          if ! printf '%s' "$LAW_ID" | grep -Eq '^[0-9a-fA-F-]{36}$'; then
            echo "ERROR: LAW_ID must be Workspace (Customer) ID GUID."
            exit 1
          fi

          # Decode primary key (base64 → binary key for HMAC)
          if ! LAW_KEY_BIN="$(printf '%s' "$LAW_KEY_B64" | base64 -d 2>/dev/null)"; then
            echo "ERROR: LAW_KEY is not clean base64 (copy Primary key again without newlines)."
            exit 1
          fi

          LOGTYPE="Selenium_Log"     # => Table: Selenium_Log_CL
          CONTENT_TYPE="application/json"
          NOW_UTC="$(LC_ALL=C date -u +"%Y-%m-%dT%H:%M:%SZ")"
          BODY_JSON="[ { \"message\":\"Object removed from the cart\", \"suite\":\"CartSuite\", \"level\":\"INFO\", \"when\":\"${NOW_UTC}\", \"buildId\":\"${BUILD_BUILDID}\" } ]"

          RFC_DATE="$(LC_ALL=C date -u +"%a, %d %b %Y %H:%M:%S GMT")"
          RESOURCE="/api/logs"
          URL="https://${LAW_ID}.ods.opinsights.azure.com${RESOURCE}?api-version=2016-04-01"

          CONTENT_LEN=$(printf "%s" "$BODY_JSON" | wc -c | tr -d ' ')
          echo "Content-Length(bytes) = $CONTENT_LEN"

          STRING_TO_SIGN="POST\n${CONTENT_LEN}\n${CONTENT_TYPE}\nx-ms-date:${RFC_DATE}\n${RESOURCE}"
          echo "StringToSign>>>"
          printf "%s\n" "$STRING_TO_SIGN"
          echo "<<<StringToSign"

          SIGNATURE=$(printf "%s" "$STRING_TO_SIGN" \
            | iconv -t UTF-8 \
            | openssl dgst -sha256 -binary -hmac "$LAW_KEY_BIN" \
            | base64)

          AUTH_HEADER="SharedKey ${LAW_ID}:${SIGNATURE}"
          echo "Posting to host: ${LAW_ID}.ods.opinsights.azure.com"

          HTTP_CODE=$(curl -sS -o /tmp/la.out -w "%{http_code}" -X POST "$URL" \
            --noproxy '*' \
            -H "Content-Type: ${CONTENT_TYPE}" \
            -H "Log-Type: ${LOGTYPE}" \
            -H "x-ms-date: ${RFC_DATE}" \
            -H "Authorization: ${AUTH_HEADER}" \
            -H "time-generated-field: when" \
            --data-binary "$BODY_JSON")

          echo "Status: $HTTP_CODE"
          echo "Response:"; head -c 500 /tmp/la.out || true

          if [ "$HTTP_CODE" != "200" ] && [ "$HTTP_CODE" != "202" ]; then
            echo "ERROR sending to Log Analytics (HTTP $HTTP_CODE)"; exit 1;
          fi
